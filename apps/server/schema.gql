# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Topping {
  id: ID!
  name: String!
  price: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Pizza {
  id: ID!
  name: String!
  size: EPizzaSize!
  price: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  toppings: [Topping!]
}

enum EPizzaSize {
  small
  medium
  large
}

type User {
  id: ID!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: EUserRole!
}

enum EUserRole {
  admin
  client
}

type PaginatedPizzasRo {
  data: [Pizza!]!
  total: Float!
  perPage: Float!
  currentPage: Float!
  lastPage: Float!
  from: Float!
  to: Float!
}

type PaginatedToppingsRo {
  data: [Topping!]!
  total: Float!
  perPage: Float!
  currentPage: Float!
  lastPage: Float!
  from: Float!
  to: Float!
}

type PaginatedUsersRo {
  data: [User!]!
  total: Float!
  perPage: Float!
  currentPage: Float!
  lastPage: Float!
  from: Float!
  to: Float!
}

input ToppingInput {
  id: ID!
  name: String!
  price: Float = 0
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PizzaInput {
  id: ID!
  name: String!
  size: EPizzaSize = small
  price: Float = 0
  createdAt: DateTime!
  updatedAt: DateTime!
  toppings: [ToppingInput!] = null
}

input UserInput {
  id: ID!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: EUserRole = client
}

type Query {
  pizzas(pagination: PaginationArgsDto): PaginatedPizzasRo!
  pizza(id: String!): Pizza
  toppings(pagination: PaginationArgsDto): PaginatedToppingsRo!
  topping(id: String!): Topping
  users(pagination: PaginationArgsDto): PaginatedUsersRo!
  user(id: String!): User
}

input PaginationArgsDto {
  page: Float = 1
  take: Float = 10
}

type Mutation {
  createPizza(pizza: CreatePizzaDto!): Pizza!
  deletePizza(id: String!): Pizza!
  updatePizza(pizza: UpdatePizzaDto!, id: String!): Pizza!
  createTopping(topping: CreateToppingDto!): Topping!
  deleteTopping(id: String!): Topping!
  updateTopping(topping: UpdateToppingDto!, id: String!): Topping!
  createUser(user: CreateUserDto!): User!
  deleteUser(id: String!): User!
  updateUser(user: UpdateUserDto!, id: String!): User!
}

input CreatePizzaDto {
  name: String!
  size: EPizzaSize = small
  price: Float = 0
  toppings: [String!] = []
}

input UpdatePizzaDto {
  name: String!
  size: EPizzaSize = small
  price: Float = 0
  toppings: [String!] = []
}

input CreateToppingDto {
  name: String!
  price: Float!
}

input UpdateToppingDto {
  name: String!
  price: Float!
}

input CreateUserDto {
  email: String!
  password: String!
  role: EUserRole = client
}

input UpdateUserDto {
  email: String!
  password: String!
  role: EUserRole = client
}
